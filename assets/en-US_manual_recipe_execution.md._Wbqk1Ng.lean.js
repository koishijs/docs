import{_ as l,k as d,m as u,f as a,y as o,l as i,B as t,A as r,j as m}from"./chunks/framework.CUOHyZ0k.js";const y=JSON.parse('{"title":"Advanced Command Tricks","description":"","frontmatter":{},"headers":[],"relativePath":"en-US/manual/recipe/execution.md","filePath":"en-US/manual/recipe/execution.md"}'),h={name:"en-US/manual/recipe/execution.md"};function p(c,e,f,b,g,k){const n=r("chat-message"),s=r("chat-panel");return m(),d("div",null,[e[8]||(e[8]=u('<h1 id="advanced-command-tricks" tabindex="-1">Advanced Command Tricks <a class="header-anchor" href="#advanced-command-tricks" aria-label="Permalink to &quot;Advanced Command Tricks&quot;">​</a></h1><h2 id="quotes" tabindex="-1">Quotes <a class="header-anchor" href="#quotes" aria-label="Permalink to &quot;Quotes&quot;">​</a></h2><p>Koishi would regard the content in quotes (whatever full-width or half-width) as a single parameter. This would be useful in many cases, for example:</p><ul><li>Passing parameters with spaces, otherwise spaces would be treated as delimiters between parameters.</li><li>Passing parameters that start with <code>-</code>, otherwise they would be treated as options.</li><li>Passing an empty string as the parameter, otherwise it would be treated as <code>true</code>.</li><li>Passing numbers as string, otherwise they would be treated as <code>number</code> type.</li></ul><h2 id="interpolation" tabindex="-1">Interpolation <a class="header-anchor" href="#interpolation" aria-label="Permalink to &quot;Interpolation&quot;">​</a></h2><p>You could use <code>$()</code> to inject the results from other commands into your current command:</p>',6)),a(s,null,{default:o(()=>[a(n,{nickname:"Alice"},{default:o(()=>e[0]||(e[0]=[t("echo foo$(echo bar)")])),_:1}),a(n,{nickname:"Koishi"},{default:o(()=>e[1]||(e[1]=[t("foobar")])),_:1})]),_:1}),e[9]||(e[9]=i("p",null,"By default, text in single quotes would not be escaped. So it can be used when you don't want the parameter to be escaped:",-1)),a(s,null,{default:o(()=>[a(n,{nickname:"Alice"},{default:o(()=>e[2]||(e[2]=[t("echo 'foo$(echo bar)'")])),_:1}),a(n,{nickname:"Koishi"},{default:o(()=>e[3]||(e[3]=[t("foo$(echo bar)")])),_:1})]),_:1}),e[10]||(e[10]=i("p",null,[t("Lastly, there is another interpolation approach in the "),i("a",{href:"https://eval.koishi.chat",target:"_blank",rel:"noreferrer"},"koishi-plugin-eval"),t(" plugin.")],-1)),e[11]||(e[11]=i("h2",{id:"fuzzy-matching",tabindex:"-1"},[t("Fuzzy Matching "),i("a",{class:"header-anchor",href:"#fuzzy-matching","aria-label":'Permalink to "Fuzzy Matching"'},"​")],-1)),e[12]||(e[12]=i("p",null,"In the daily use, it is not surprise that you make typos. In this case, Koishi would show hints based on similar commands:",-1)),a(s,null,{default:o(()=>[a(n,{nickname:"Alice"},{default:o(()=>e[4]||(e[4]=[t("ecko hello")])),_:1}),a(n,{nickname:"Koishi"},{default:o(()=>e[5]||(e[5]=[t("您要找的是不是“echo”？Send a period to apply the suggestion.")])),_:1}),a(n,{nickname:"Alice"},{default:o(()=>e[6]||(e[6]=[t(".")])),_:1}),a(n,{nickname:"Koishi"},{default:o(()=>e[7]||(e[7]=[t("hello")])),_:1})]),_:1}),e[13]||(e[13]=i("p",null,[t("You could also change the value of "),i("a",{href:"./../../api/core/app.html#options-minsimilarity"},"minSimilarity"),t(" in the global configuration to adjust the threshold of the fuzzy matching. Very convenient, isn't it?")],-1))])}const x=l(h,[["render",p]]);export{y as __pageData,x as default};
