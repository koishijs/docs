import{_ as l,k as u,m,f as a,y as o,l as i,B as t,A as r,j as d}from"./chunks/framework.CUOHyZ0k.js";const b=JSON.parse('{"title":"Utilisations avancées des commandes","description":"","frontmatter":{},"headers":[],"relativePath":"fr-FR/manual/recipe/execution.md","filePath":"fr-FR/manual/recipe/execution.md"}'),p={name:"fr-FR/manual/recipe/execution.md"};function c(f,e,h,v,g,k){const n=r("chat-message"),s=r("chat-panel");return d(),u("div",null,[e[8]||(e[8]=m('<h1 id="utilisations-avancees-des-commandes" tabindex="-1">Utilisations avancées des commandes <a class="header-anchor" href="#utilisations-avancees-des-commandes" aria-label="Permalink to &quot;Utilisations avancées des commandes&quot;">​</a></h1><h2 id="les-guillemets" tabindex="-1">Les guillemets <a class="header-anchor" href="#les-guillemets" aria-label="Permalink to &quot;Les guillemets&quot;">​</a></h2><p>Koishi interprète automatiquement le contenu entre guillemets comme un paramètre single. Cela s&#39;avère très utile dans de nombreuses situations, voici quelques exemples courants :</p><ul><li>Si vous souhaitez transmettre des paramètres contenant des espaces (le comportement par défaut est de n&#39;interpréter que la partie avant l&#39;espace).</li><li>Si vous souhaitez transmettre des paramètres commençant par <code>-</code> (le comportement par défaut est d&#39;interpréter le prochain élément comme une option).</li><li>Si vous souhaitez transmettre une chaîne vide en tant que paramètre (le comportement par défaut est d&#39;interpréter comme <code>true</code>).</li><li>Si vous souhaitez transmettre des paramètres constitués uniquement de chiffres (le comportement par défaut est d&#39;interpréter comme des types <code>number</code>).</li></ul><h2 id="l-interpolation" tabindex="-1">L&#39;Interpolation <a class="header-anchor" href="#l-interpolation" aria-label="Permalink to &quot;L&#39;Interpolation&quot;">​</a></h2><p>Si vous souhaitez utiliser le contenu d&#39;une autre commande au sein d&#39;une commande, vous pouvez utiliser <code>$()</code> pour l&#39;interpolation de commandes :</p>',6)),a(s,null,{default:o(()=>[a(n,{nickname:"Alice"},{default:o(()=>e[0]||(e[0]=[t("echo foo$(echo bar)")])),_:1}),a(n,{nickname:"Koishi"},{default:o(()=>e[1]||(e[1]=[t("foobar")])),_:1})]),_:1}),e[9]||(e[9]=i("p",null,"Koishi ne s'échappe pas automatiquement du texte entre guillemets simples. Si vous ne souhaitez pas que certains paramètres soient échappés par la syntaxe d'interpolation, vous pouvez utiliser des guillemets simples :",-1)),a(s,null,{default:o(()=>[a(n,{nickname:"Alice"},{default:o(()=>e[2]||(e[2]=[t("echo 'foo$(echo bar)'")])),_:1}),a(n,{nickname:"Koishi"},{default:o(()=>e[3]||(e[3]=[t("foo$(echo bar)")])),_:1})]),_:1}),e[10]||(e[10]=i("p",null,[t("Enfin, vous pouvez également en savoir plus sur une autre méthode d'interpolation dans "),i("a",{href:"https://eval.koishi.chat",target:"_blank",rel:"noreferrer"},"koishi-plugin-eval"),t(".")],-1)),e[11]||(e[11]=i("h2",{id:"correspondance-floue",tabindex:"-1"},[t("Correspondance floue "),i("a",{class:"header-anchor",href:"#correspondance-floue","aria-label":'Permalink to "Correspondance floue"'},"​")],-1)),e[12]||(e[12]=i("p",null,"Dans l'utilisation quotidienne, il arrive parfois de faire des fautes de frappe. Dans ces cas, Koishi peut automatiquement corriger en suggérant des commandes similaires :",-1)),a(s,null,{default:o(()=>[a(n,{nickname:"Alice"},{default:o(()=>e[4]||(e[4]=[t("ecko bonjour")])),_:1}),a(n,{nickname:"Koishi"},{default:o(()=>e[5]||(e[5]=[t("Voulez-vous dire « echo » ? Tapez un point pour appliquer la suggestion.")])),_:1}),a(n,{nickname:"Alice"},{default:o(()=>e[6]||(e[6]=[t(".")])),_:1}),a(n,{nickname:"Koishi"},{default:o(()=>e[7]||(e[7]=[t("bonjour")])),_:1})]),_:1}),e[13]||(e[13]=i("p",null,[t("Si vous souhaitez ajuster le degré de correspondance floue, vous pouvez modifier la configuration "),i("a",{href:"./../../api/core/app.html#options-minsimilarity"},"minSimilarity"),t(". Pratique, n'est-ce pas ?")],-1))])}const x=l(p,[["render",c]]);export{b as __pageData,x as default};
