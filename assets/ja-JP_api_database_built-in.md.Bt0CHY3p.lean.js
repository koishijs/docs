import{_ as s,k as l,m as t,l as i,B as a,f as r,y as d,A as n,j as c}from"./chunks/framework.CUOHyZ0k.js";const q=JSON.parse('{"title":"組み込みデータ構造","description":"","frontmatter":{},"headers":[],"relativePath":"ja-JP/api/database/built-in.md","filePath":"ja-JP/api/database/built-in.md"}'),g={name:"ja-JP/api/database/built-in.md"},h={id:"ctx-database-getassignedchannels",tabindex:"-1"};function u(m,e,b,p,f,x){const o=n("badge");return c(),l("div",null,[e[4]||(e[4]=t('<h1 id="組み込みデータ構造" tabindex="-1">組み込みデータ構造 <a class="header-anchor" href="#組み込みデータ構造" aria-label="Permalink to &quot;組み込みデータ構造&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>参见：<a href="./../../guide/database/builtin.html">开发 &gt; 数据库 &gt; 内置数据结构</a></p></div><p>Koishi 的数据库 API 实际上分为两部分：</p><ul><li>Minato 定义的通用数据库接口，由数据库插件实现</li><li>Koishi 内置数据结构相关的方法，由 Koishi 提供实现</li></ul><p>这一页中将仅展示第二部分的内容。另一部分的内容请参见 <a href="./database.html">数据库操作</a>。</p><h2 id="組み込みテーブル" tabindex="-1">組み込みテーブル <a class="header-anchor" href="#組み込みテーブル" aria-label="Permalink to &quot;組み込みテーブル&quot;">​</a></h2><h3 id="user" tabindex="-1">User <a class="header-anchor" href="#user" aria-label="Permalink to &quot;User&quot;">​</a></h3><ul><li><strong>id:</strong> <code>id</code> ユーザー ID</li><li><strong>name:</strong> <code>string</code> ユーザー名</li><li><strong>authority:</strong> <code>number</code> <a href="./../../guide/database/permission.html">权限等级</a></li><li><strong>permissions:</strong> <code>string[]</code> <a href="./../../guide/database/permission.html">权限列表</a></li><li><strong>locales:</strong> <code>string[]</code> 语言列表</li></ul><h3 id="binding" tabindex="-1">Binding <a class="header-anchor" href="#binding" aria-label="Permalink to &quot;Binding&quot;">​</a></h3><ul><li><strong>aid:</strong> <code>id</code> ユーザー ID</li><li><strong>platform:</strong> <code>string</code> プラットフォーム名</li><li><strong>pid:</strong> <code>string</code> 平台账号</li></ul><h3 id="channel" tabindex="-1">Channel <a class="header-anchor" href="#channel" aria-label="Permalink to &quot;Channel&quot;">​</a></h3><ul><li><strong>platform:</strong> <code>string</code> プラットフォーム名</li><li><strong>id:</strong> <code>string</code> 平台账号</li><li><strong>assignee:</strong> <code>string</code> <a href="./../../manual/usage/customize.html#受理人机制">受理人</a></li><li><strong>permissions:</strong> <code>string[]</code> <a href="./../../guide/database/permission.html">权限列表</a></li><li><strong>locales:</strong> <code>string[]</code> 语言列表</li></ul><h2 id="組み込みインスタンスメソッド" tabindex="-1">組み込みインスタンスメソッド <a class="header-anchor" href="#組み込みインスタンスメソッド" aria-label="Permalink to &quot;組み込みインスタンスメソッド&quot;">​</a></h2><p>以下のインスタンスメソッドは @koishijs/core で実装されます。</p><h3 id="ctx-database-getuser" tabindex="-1">ctx.database.getUser(platform, id, modifier?) <a class="header-anchor" href="#ctx-database-getuser" aria-label="Permalink to &quot;ctx.database.getUser(platform, id, modifier?)&quot;">​</a></h3><ul><li><strong>platform:</strong> <code>string</code> プラットフォーム名</li><li><strong>id:</strong> <code>string</code> ユーザー識別子</li><li><strong>modifier:</strong> <code>QueryModifier&lt;User.Field&gt;</code> クエリ修飾子</li><li>戻り値: <code>Promise&lt;User&gt;</code> ユーザーデータ</li></ul><p>データベースにユーザーデータをリクエストします。</p><h3 id="ctx-database-setuser" tabindex="-1">ctx.database.setUser(platform, id, data) <a class="header-anchor" href="#ctx-database-setuser" aria-label="Permalink to &quot;ctx.database.setUser(platform, id, data)&quot;">​</a></h3><ul><li><strong>platform:</strong> <code>string</code> プラットフォーム名</li><li><strong>id:</strong> <code>string</code> ユーザー識別子</li><li><strong>data:</strong> <code>User</code> 変更・追加するデータ</li><li>戻り値: <code>Promise&lt;void&gt;</code></li></ul><p>データベースにユーザーデータを修正・追加します。</p><h3 id="ctx-database-getchannel" tabindex="-1">ctx.database.getChannel(platform, id, fields?) <a class="header-anchor" href="#ctx-database-getchannel" aria-label="Permalink to &quot;ctx.database.getChannel(platform, id, fields?)&quot;">​</a></h3><ul><li><strong>platform:</strong> <code>string</code> プラットフォーム名</li><li><strong>id:</strong> <code>string</code> チャンネル識別子</li><li><strong>fields:</strong> <code>QueryModifier&lt;User.Field&gt;</code> クエリ修飾子</li><li>戻り値: <code>Promise&lt;Channel&gt;</code> チャンネルデータ</li></ul><p>データベースにチャンネルデータをリクエストします。</p>',23)),i("h3",h,[e[1]||(e[1]=a("ctx.database.getAssignedChannels(fields?, platform?, assignees?) ")),r(o,{type:"danger"},{default:d(()=>e[0]||(e[0]=[a("非推奨")])),_:1}),e[2]||(e[2]=a()),e[3]||(e[3]=i("a",{class:"header-anchor",href:"#ctx-database-getassignedchannels","aria-label":'Permalink to "ctx.database.getAssignedChannels(fields?, platform?, assignees?) <badge type="danger">非推奨</badge>"'},"​",-1))]),e[5]||(e[5]=t('<ul><li><strong>fields:</strong> <code>ChannelField[]</code> リクエストするフィールド。デフォルトはすべてのフィールドです。</li><li><strong>platform:</strong> <code>string</code> プラットフォーム名。デフォルトはすべてのプラットフォームです。</li><li><strong>assignees:</strong> <code>string[]</code> 代理人リスト。デフォルトは現在実行されているすべてのボットです。</li><li>戻り値: <code>Promise&lt;Channel[]&gt;</code> チャンネルデータリスト</li></ul><p>データベースに特定のボットが管理するすべでのチャンネルデータをリクエストします。ここにある二つの引数のどちらを選んでも、正しく認識されます。</p><h3 id="ctx-database-setchannel" tabindex="-1">ctx.database.setChannel(platform, id, data) <a class="header-anchor" href="#ctx-database-setchannel" aria-label="Permalink to &quot;ctx.database.setChannel(platform, id, data)&quot;">​</a></h3><ul><li><strong>platform:</strong> <code>string</code> プラットフォーム名</li><li><strong>id:</strong> <code>number</code> チャンネル識別子</li><li><strong>data:</strong> <code>Channel</code> 修正・追加するデータ</li><li>戻り値: <code>Promise&lt;void&gt;</code></li></ul><p>データベースにチャンネルデータを修正・追加します。</p>',5))])}const k=s(g,[["render",u]]);export{q as __pageData,k as default};
