import{_ as s,k as l,m as t,l as i,B as a,f as r,y as d,A as n,j as c}from"./chunks/framework.CUOHyZ0k.js";const P=JSON.parse('{"title":"內建資料結構","description":"","frontmatter":{},"headers":[],"relativePath":"zh-TW/api/database/built-in.md","filePath":"zh-TW/api/database/built-in.md"}'),g={name:"zh-TW/api/database/built-in.md"},h={id:"ctx-database-getassignedchannels",tabindex:"-1"};function u(m,e,b,p,f,x){const o=n("badge");return c(),l("div",null,[e[4]||(e[4]=t('<h1 id="內建資料結構" tabindex="-1">內建資料結構 <a class="header-anchor" href="#內建資料結構" aria-label="Permalink to &quot;內建資料結構&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>参见：<a href="./../../guide/database/builtin.html">开发 &gt; 数据库 &gt; 内置数据结构</a></p></div><p>Koishi 的数据库 API 实际上分为两部分：</p><ul><li>Minato 定义的通用数据库接口，由数据库插件实现</li><li>Koishi 内置数据结构相关的方法，由 Koishi 提供实现</li></ul><p>这一页中将仅展示第二部分的内容。另一部分的内容请参见 <a href="./database.html">数据库操作</a>。</p><h2 id="内建表" tabindex="-1">内建表 <a class="header-anchor" href="#内建表" aria-label="Permalink to &quot;内建表&quot;">​</a></h2><h3 id="user" tabindex="-1">User <a class="header-anchor" href="#user" aria-label="Permalink to &quot;User&quot;">​</a></h3><ul><li><strong>id:</strong> <code>id</code> 使用者 ID</li><li><strong>name:</strong> <code>string</code> 使用者暱稱</li><li><strong>authority:</strong> <code>number</code> <a href="./../../guide/database/permission.html">权限等级</a></li><li><strong>permissions:</strong> <code>string[]</code> <a href="./../../guide/database/permission.html">权限列表</a></li><li><strong>locales:</strong> <code>string[]</code> 語言列表</li></ul><h3 id="binding" tabindex="-1">Binding <a class="header-anchor" href="#binding" aria-label="Permalink to &quot;Binding&quot;">​</a></h3><ul><li><strong>aid:</strong> <code>id</code> 使用者 ID</li><li><strong>platform:</strong> <code>string</code> 平臺名</li><li><strong>pid:</strong> <code>string</code> 平台账号</li></ul><h3 id="channel" tabindex="-1">Channel <a class="header-anchor" href="#channel" aria-label="Permalink to &quot;Channel&quot;">​</a></h3><ul><li><strong>platform:</strong> <code>string</code> 平臺名</li><li><strong>id:</strong> <code>string</code> 平台账号</li><li><strong>assignee:</strong> <code>string</code> <a href="./../../manual/usage/customize.html#受理人机制">受理人</a></li><li><strong>permissions:</strong> <code>string[]</code> <a href="./../../guide/database/permission.html">权限列表</a></li><li><strong>locales:</strong> <code>string[]</code> 語言列表</li></ul><h2 id="內建實體方法" tabindex="-1">內建實體方法 <a class="header-anchor" href="#內建實體方法" aria-label="Permalink to &quot;內建實體方法&quot;">​</a></h2><p>下列實體方法直接由 @koishijs/core 提供實現。</p><h3 id="ctx-database-getuser" tabindex="-1">ctx.database.getUser(platform, id, modifier?) <a class="header-anchor" href="#ctx-database-getuser" aria-label="Permalink to &quot;ctx.database.getUser(platform, id, modifier?)&quot;">​</a></h3><ul><li><strong>platform:</strong> <code>string</code> 平臺名</li><li><strong>id:</strong> <code>string</code> 使用者識別符號</li><li><strong>modifier:</strong> <code>QueryModifier&lt;User.Field&gt;</code> 請求飾詞</li><li>回返值: <code>Promise&lt;User&gt;</code> 使用者資料</li></ul><p>向資料庫請求使用者資料。</p><h3 id="ctx-database-setuser" tabindex="-1">ctx.database.setUser(platform, id, data) <a class="header-anchor" href="#ctx-database-setuser" aria-label="Permalink to &quot;ctx.database.setUser(platform, id, data)&quot;">​</a></h3><ul><li><strong>platform:</strong> <code>string</code> 平臺名</li><li><strong>id:</strong> <code>string</code> 使用者識別符號</li><li><strong>data:</strong> <code>User</code> 要修改 / 新增的資料</li><li>回返值: <code>Promise&lt;void&gt;</code></li></ul><p>向資料庫修改或新增使用者資料。</p><h3 id="ctx-database-getchannel" tabindex="-1">ctx.database.getChannel(platform, id, fields?) <a class="header-anchor" href="#ctx-database-getchannel" aria-label="Permalink to &quot;ctx.database.getChannel(platform, id, fields?)&quot;">​</a></h3><ul><li><strong>platform:</strong> <code>string</code> 平臺名</li><li><strong>id:</strong> <code>string</code> 頻道識別符號</li><li><strong>fields:</strong> <code>QueryModifier&lt;User.Field&gt;</code> 請求飾詞</li><li>回返值: <code>Promise&lt;Channel&gt;</code> 頻道資料</li></ul><p>向資料庫請求頻道資料。</p>',23)),i("h3",h,[e[1]||(e[1]=a("ctx.database.getAssignedChannels(fields?, platform?, assignees?) ")),r(o,{type:"danger"},{default:d(()=>e[0]||(e[0]=[a("廢棄")])),_:1}),e[2]||(e[2]=a()),e[3]||(e[3]=i("a",{class:"header-anchor",href:"#ctx-database-getassignedchannels","aria-label":'Permalink to "ctx.database.getAssignedChannels(fields?, platform?, assignees?) <badge type="danger">廢棄</badge>"'},"​",-1))]),e[5]||(e[5]=t('<ul><li><strong>fields:</strong> <code>ChannelField[]</code> 請求的欄位，預設為全部欄位</li><li><strong>platform:</strong> <code>string</code> 平臺名，預設為全平臺</li><li><strong>assignees:</strong> <code>string[]</code> 指派者列表，預設為當前執行的全部機器人</li><li>回返值: <code>Promise&lt;Channel[]&gt;</code> 頻道資料列表</li></ul><p>向資料庫請求被特定機器人管理的所有頻道資料。這裡的兩個引數可以寫任意一個，都可以識別。</p><h3 id="ctx-database-setchannel" tabindex="-1">ctx.database.setChannel(platform, id, data) <a class="header-anchor" href="#ctx-database-setchannel" aria-label="Permalink to &quot;ctx.database.setChannel(platform, id, data)&quot;">​</a></h3><ul><li><strong>platform:</strong> <code>string</code> 平臺名</li><li><strong>id:</strong> <code>number</code> 頻道識別符號</li><li><strong>data:</strong> <code>Channel</code> 要修改 / 新增的資料</li><li>回返值: <code>Promise&lt;void&gt;</code></li></ul><p>向資料庫修改或新增頻道資料。</p>',5))])}const k=s(g,[["render",u]]);export{P as __pageData,k as default};
